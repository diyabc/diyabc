# Copyright (c) 2019-2020 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
name: diyabc-build
on: [push]

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
        upload_url: ${{ steps.new_release.outputs.upload_url }}
        new_tag: ${{ steps.bump_version.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Bump version and push tag
        id: bump_version
        uses: anothrNick/github-tag-action@1.61.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          INITIAL_VERSION: 1.0.12
          DEFAULT_BUMP: patch
      - name: Create release
        id: new_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_tag }}
          release_name: Release ${{ steps.bump_version.outputs.new_tag }}
          draft: true
          prerelease: true  
  job:
    name: diyabc-${{ matrix.os }}
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            shortos: windows
            cmakeargs: -DMAKE_STATIC_EXE:STRING=1 -DCMAKE_BUILD_TYPE:STRING=Release -G Ninja
          - os: ubuntu-latest
            shortos: linux
            clang-dir: clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04
            clang-download: https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.6/clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04.tar.xz
            mkl-version: 2023.1.0
            cmakeargs: -DMAKE_STATIC_EXE:BOOL=TRUE -DCMAKE_BUILD_TYPE:STRING=Release -G Ninja
          - os: macos-latest
            shortos: macos
            cmakeargs: '-DMAKE_STATIC_EXE:BOOL=TRUE -DCMAKE_BUILD_TYPE:STRING=Release -G Ninja' 
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - uses: lukka/get-cmake@latest
      - name: Get R version
        run: echo "::set-output name=R_VERSION::$(Rscript -e 'cat(as.character(getRversion()))')"
        id: get-r-version
      - name: restore/cache R site-packages
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/RLibrary 
          key: R-site-packages-${{ matrix.shortos }}-${{ steps.get-r-version.outputs.R_VERSION }}
      - name: restore/cache clang
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/${{ matrix.clang-dir }}
          key: ${{ matrix.clang-dir }}-v3
        if: matrix.os == 'ubuntu-latest'
      - name: restore/cache mkl
        uses: actions/cache@v2
        with:
          path: /opt/intel
          key: ${{ matrix.mkl-version }}
        if: matrix.os == 'ubuntu-latest'
      - name: setup x64-linux
        run: |
          if [ ! -d ${{ github.workspace }}/${{ matrix.clang-dir }} ]; then 
            sudo sh -c "wget -qO- ${{ matrix.clang-download }} | tar xJ --totals -C ${{ github.workspace }}"
          fi
          if [ ! -d /opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64 ]; then
            wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
            echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
            sudo apt-get update
            sudo apt-get install -y intel-oneapi-compiler-shared-${{ matrix.mkl-version }}
          fi
          echo ${{ github.workspace }}/${{ matrix.clang-dir }}/bin >> $GITHUB_PATH
          echo "CC=${{ github.workspace }}/${{ matrix.clang-dir }}/bin/clang" >> $GITHUB_ENV
          echo "CXX=${{ github.workspace }}/${{ matrix.clang-dir }}/bin/clang++" >> $GITHUB_ENV
          echo "CFLAGS=-static -fopenmp=libiomp5" >> $GITHUB_ENV
          echo "CXXFLAGS=-static -stdlib=libc++ -fopenmp=libiomp5" >> $GITHUB_ENV
          echo "LDFLAGS=-L/opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64_lin/" >> $GITHUB_ENV
          if [ ! -d ${{ github.workspace }}/RLibrary ]; then mkdir ${{ github.workspace }}/RLibrary; fi
          echo "R_LIBS_USER=${{ github.workspace }}/RLibrary" >> $GITHUB_ENV
        if: matrix.os == 'ubuntu-latest'
      - name: setup MacOS
        run: |
          brew install ninja
          echo "CC=$(brew --prefix llvm@15)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@15)/bin/clang++" >> $GITHUB_ENV
          echo "CFLAGS=-Xclang -fopenmp" >> $GITHUB_ENV
          echo "CXXFLAGS=-Xclang -fopenmp >> $GITHUB_ENV
          if [ ! -d ${{ github.workspace }}/RLibrary ]; then mkdir ${{ github.workspace }}/RLibrary; fi
          echo "R_LIBS_USER=${{ github.workspace }}/RLibrary" >> $GITHUB_ENV
        if: matrix.os == 'macos-latest'
      - name: Configure MSVC console (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1.4.1
      - name: setup windows
        run: |
          # Set these env vars so cmake picks the correct compiler
          echo "CXX=cl.exe" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "CC=cl.exe" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          if (!(Test-Path ${{ github.workspace }}\RLibrary)) { mkdir ${{ github.workspace }}\RLibrary }          
          echo "R_LIBS_USER=${{ github.workspace }}\RLibrary" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
        if: matrix.os == 'windows-latest'
      - name: Run CMake+Ninja
        uses: lukka/run-cmake@v3
        id: runcmake_cmd
        with:
          cmakeGenerator: 'Ninja'  
          cmakeListsOrSettingsJson: 'CMakeListsTxtAdvanced'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          buildWithCMakeArgs: '--target install -- -v'
          buildWithCMake: true
          buildDirectory: ${{ runner.workspace }}/b/ninja/
          cmakeAppendedArgs: '${{ matrix.cmakeargs }}'
      - name: Prepare tests
        id: preptests
        run: Rscript -e "for (p in c('stringr','readr','testthat')) if (!require(p, character.only=TRUE)) install.packages(p, repos='https://cloud.r-project.org/')"
      - name: Run Tests
        id: ctest
        working-directory: ${{ runner.workspace }}/b/ninja/
        run: ctest -j1 -T test --output-on-failure -VV --progress 
      - name: Failure
        if: failure() 
        uses: author/action-rollback@stable
        with:
          id: ${{ needs.create_release.id }}
          tag: ${{ needs.create_release.outputs.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: Upload windows binary
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: diyabc-${{ matrix.os }}
      #     path: ${{ runner.workspace }}/b/ninja/install/
      #   if: contains( matrix.os, 'windows')
      # - name: Upload binary
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: diyabc-${{ matrix.os }}
      #     path: ${{ runner.workspace }}/b/ninja/install/general
      #   if: "! contains( matrix.os, 'windows')"
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash      
      - name: zip for windows
        id: zip_win
        run: |
          Rename-Item -Path ${{ runner.workspace }}\b\ninja\install\general.exe -NewName "diyabc-RF-windows-${{ needs.create_release.outputs.new_tag }}.exe"
          Compress-Archive -Path ${{ runner.workspace }}\b\ninja\install\* -DestinationPath  ${{ runner.workspace }}\b\ninja\install.zip
        if: matrix.os == 'windows-latest'
      - name: Upload Release Asset Unix
        id: upload-release-asset-unix
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ runner.workspace }}/b/ninja/install/general
          asset_name: diyabc-RF-${{ matrix.shortos }}-${{ needs.create_release.outputs.new_tag }}
          asset_content_type: application/octet-stream
        if: matrix.os != 'windows-latest'
      - name: Upload Release Asset Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ runner.workspace }}/b/ninja/install.zip
          asset_name: diyabc-RF-${{ matrix.shortos }}-${{ needs.create_release.outputs.new_tag }}.zip
          asset_content_type: application/zip
        if: matrix.os == 'windows-latest'
  