# Copyright (c) 2019-2020 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
name: diyabc-build
on:
  push:
    tags:
      - '*'

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true
  job:
    name: diyabc-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            shortos: windows
            cmakeargs: -DMAKE_STATIC_EXE:STRING=1 -DCMAKE_BUILD_TYPE:STRING=Release -G Ninja
          - os: ubuntu-latest
            shortos: linux
            clang-dir: clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04
            clang-download: https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz
            mkl-version: intel-mkl-64bit-2020.0-088
            cmakeargs: -DMAKE_STATIC_EXE:BOOL=TRUE -DCMAKE_BUILD_TYPE:STRING=Release -G Ninja
          - os: macos-latest
            shortos: macos
            cmakeargs: '"-DOpenMP_CXX_FLAGS:STRING=-Xpreprocessor -fopenmp -I/usr/local/include" "-DOpenMP_C_FLAGS:STRING=-Xpreprocessor -fopenmp -I/usr/local/include" -DOpenMP_CXX_LIB_NAMES:STRING=omp -DOpenMP_C_LIB_NAMES:STRING=omp -DOpenMP_omp_LIBRARY:STRING=libomp.a -DOpenMP_CXX_LIBRARIES:STRING=libomp.a -DMAKE_STATIC_EXE:BOOL=TRUE -DCMAKE_BUILD_TYPE:STRING=Release -G Ninja' 
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - uses: lukka/get-cmake@latest
      - name: restore/cache clang
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/${{ matrix.clang-dir }}
          key: ${{ matrix.clang-dir }}-v3
        if: matrix.os == 'ubuntu-latest'
      - name: restore/cache mkl
        uses: actions/cache@v2
        with:
          path: /opt/intel
          key: ${{ matrix.mkl-version }}
        if: matrix.os == 'ubuntu-latest'
      - name: setup x64-linux
        run: |
          if [ ! -d ${{ github.workspace }}/${{ matrix.clang-dir }} ]; then 
            sudo sh -c "wget -qO- ${{ matrix.clang-download }} | tar xJ --totals -C ${{ github.workspace }}"
          fi
          if [ ! -d /opt/intel/lib/intel64 ]; then
            wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
            sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
            sudo sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list'
            sudo apt-get update
            sudo apt-get install -y ${{ matrix.mkl-version }}
          fi
          echo ${{ github.workspace }}/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04/bin >> $GITHUB_PATH
          echo "CC=${{ github.workspace }}/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04/bin/clang" >> $GITHUB_ENV
          echo "CXX=${{ github.workspace }}/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04/bin/clang++" >> $GITHUB_ENV
          echo "CFLAGS=-static -fopenmp=libiomp5" >> $GITHUB_ENV
          echo "CXXFLAGS=-static -stdlib=libc++ -fopenmp=libiomp5" >> $GITHUB_ENV
          echo "LDFLAGS=-L/opt/intel/lib/intel64" >> $GITHUB_ENV
        if: matrix.os == 'ubuntu-latest'
      - name: setup MacOS
        run: |
          brew install ninja libomp
          echo "CFLAGS=-Xpreprocessor -fopenmp -I/usr/local/include" >> $GITHUB_ENV
          echo "CXXFLAGS=-Xpreprocessor -fopenmp -I/usr/local/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L/usr/local/lib" >> $GITHUB_ENV
        if: matrix.os == 'macos-latest'
      - name: Configure MSVC console (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1.4.1
      - name: setup windows
        run: |
          # Set these env vars so cmake picks the correct compiler
          echo "CXX=cl.exe" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "CC=cl.exe" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
        if: matrix.os == 'windows-latest'
      - name: Run CMake+Ninja
        uses: lukka/run-cmake@v3
        id: runcmake_cmd
        with:
          cmakeGenerator: 'Ninja'  
          cmakeListsOrSettingsJson: 'CMakeListsTxtAdvanced'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          buildWithCMakeArgs: '--target install -- -v'
          buildWithCMake: true
          buildDirectory: ${{ runner.workspace }}/b/ninja/
          cmakeAppendedArgs: '${{ matrix.cmakeargs }}'
      # - name: Upload windows binary
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: diyabc-${{ matrix.os }}
      #     path: ${{ runner.workspace }}/b/ninja/install/
      #   if: contains( matrix.os, 'windows')
      # - name: Upload binary
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: diyabc-${{ matrix.os }}
      #     path: ${{ runner.workspace }}/b/ninja/install/general
      #   if: "! contains( matrix.os, 'windows')"
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash      
      - name: zip for windows
        id: zip_win
        run: |
          Rename-Item -Path ${{ runner.workspace }}\b\ninja\install\general.exe -NewName "diyabc-windows-${{ steps.get_version.outputs.VERSION }}.exe"
          Compress-Archive -Path ${{ runner.workspace }}\b\ninja\install -DestinationPath  ${{ runner.workspace }}\b\ninja\install.zip
        if: matrix.os == 'windows-latest'
      - name: Upload Release Asset Unix
        id: upload-release-asset-unix
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ runner.workspace }}/b/ninja/install/general
          asset_name: diyabc-${{ matrix.shortos }}-${{ steps.get_version.outputs.VERSION }}
          asset_content_type: application/octet-stream
        if: matrix.os != 'windows-latest'
      - name: Upload Release Asset Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ runner.workspace }}/b/ninja/install.zip
          asset_name: diyabc-${{ matrix.shortos }}-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip
        if: matrix.os == 'windows-latest'
  