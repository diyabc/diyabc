# Copyright (c) 2019-2020 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
name: hosted-basic-autocache
on: [push]

jobs:
  job:
    name: ${{ matrix.os }}-hosted-basic
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
            vcpkgCommitId: '8a9a97315aefb3f8bc5d81bf66ca0025938b9c91'
            vcpkgPackages: 'sqlite3'
          - os: ubuntu-latest
            triplet: x64-linux
            vcpkgCommitId: '8a9a97315aefb3f8bc5d81bf66ca0025938b9c91'
            vcpkgPackages: 'sqlite3'
          - os: macos-latest
            triplet: x64-osx
            vcpkgCommitId: '8a9a97315aefb3f8bc5d81bf66ca0025938b9c91'
            vcpkgPackages: 'sqlite3'

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - uses: lukka/get-cmake@latest
      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash
      - name: setup x64-linux
        run: |
          sudo sh -c "wget -qO- https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz | tar xvJ -C /root" 
          echo /root/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04/bin >> $GITHUB_PATH
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "CFLAGS=-static -fopenmp=libiomp5" >> $GITHUB_ENV
          echo "CXXFLAGS=-static -stdlib=libc++ -fopenmp=libiomp5" >> $GITHUB_ENV
          echo "LDFLAGS=-L/opt/intel/mkl/lib/intel64" >> $GITHUB_ENV
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
          sudo sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list'
          sudo apt-get update
          sudo apt-get install -y intel-mkl-64bit-2020.0-088
        if: matrix.os == 'ubuntu-latest'
      - name: setup MacOS
        run: |
          brew install ninja
          echo "CFLAGS=-Xpreprocessor -fopenmp -I/usr/local/include" >> $GITHUB_ENV
          echo "CXXFLAGS=-Xpreprocessor -fopenmp -I/usr/local/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L/usr/local/lib" >> $GITHUB_ENV
        if: matrix.os == 'macos-latest'
      - name: Restore artifacts, or run vcpkg, build and cache artifacts
        uses: lukka/run-vcpkg@v4
        id: runvcpkg
        with:
          vcpkgArguments: '${{ matrix.vcpkgPackages }}'
          vcpkgTriplet: '${{ matrix.triplet }}'
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'
      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash
      - name: Prints outputs of run-vcpkg task
        run: echo "'${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}' '${{  steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}' "
      - name: Run CMake+Ninja without triplet
        uses: lukka/run-cmake@v3
        id: runcmake
        with:
          cmakeGenerator: 'Ninja'  
          cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildWithCMakeArgs: '-- -v'
          buildDirectory: '${{ runner.workspace }}/b/ninja/'
      - name: Run CMake+Ninja with triplet (cmd)
        uses: lukka/run-cmake@v3
        id: runcmake_cmd
        with:
          cmakeGenerator: 'Ninja'  
          cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildWithCMakeArgs: '-- -v'
          vcpkgTriplet: ${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}
          buildDirectory: '${{ runner.workspace }}/b/ninja/'
      - name: Run CMake+Ninja with triplet (bash)
        if: false
        uses: lukka/run-cmake@v3
        id: runcmake_bash
        with:
          cmakeGenerator: 'Ninja'  
          cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildWithCMakeArgs: '-- -v'
          vcpkgTriplet: ${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}
          buildDirectory: '${{ runner.workspace }}/b/ninja-bash/'
          useShell: bash
      - name: Upload windows binary
        uses: actions/upload-artifact@v2
        with:
          name: diyabc-${{ matrix.os }}.exe
          path: ${{ runner.workspace }}/b/ninja/src-JMC-C++/general.exe
        if: contains( matrix.os, 'windows')
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: diyabc-${{ matrix.os }}
          path: ${{ runner.workspace }}/b/ninja/src-JMC-C++/general
        if: "! contains( matrix.os, 'windows')"

